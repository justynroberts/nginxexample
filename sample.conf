# The following line adds the basic module Instana uses to get tracing data.
# It is required that you use the version of this module built by Instana,
# rather than the one shipped in many NGINX distros, as there are some
# modifications in the Instana version that are required for tracing to work
load_module modules/ngx_http_opentracing_module.so;

# Whitelists environment variables used for tracer configuration to avoid
# that NGINX wipes them. This is only needed if instana-config.json
# should contain an empty configuration with "{}" inside to do the
# configuration via these environment variables instead.
env INSTANA_SERVICE_NAME;
env INSTANA_AGENT_HOST;
env INSTANA_AGENT_PORT;
env INSTANA_MAX_BUFFERED_SPANS;
env INSTANA_DEV;

events {}

error_log /dev/stdout info;

http {
  error_log /dev/stdout info;

  # The following line loads the Instana libsinstana_sensor library, that
  # gets the tracing data from ngx_http_opentracing_module.so and converts
  # them to Instana AutoTrace tracing data.
  # The content of instana-config.json is discussed below.
  opentracing_load_tracer /usr/local/lib/libinstana_sensor.so /etc/instana-config.json;

  # Propagates the active span context for upstream requests.
  # Without this configuration, the Instana trace will end at
  # NGINX, and the systems downstream (those to which NGINX
  # routes the requests) monitored by Instana will generate
  # new, unrelated traces
  opentracing_propagate_context;

  # If you use upstreams, Instana will automatically use them as endpoints,
  # and it is really cool :-)
  #upstream backend {
  #  server server-app:8080;
  #}

  server {
    error_log /dev/stdout info;
    listen 80;
    server_name localhost;

    location /static {
      root /var/www/html/;
    }
    
  location /nginx_status {
  stub_status  on;
  access_log   off;
  }

    #location ^~ /api {
    #  proxy_pass http://backend;
    #}

    #location ^~ /other_api {
      #proxy_set_header X-AWESOME-HEADER "truly_is_awesome";

      # Using the `proxy_set_header` directive voids for this
      # location the `opentracing_propagate_context` defined
      # at the `http` level, so here we need to set it again.
      # It needs to be set for every block where `proxy_set_header`
      # is found. This can also be the case at `server` level.
      #opentracing_propagate_context;

    #proxy_pass http://backend;
    #}
  }
}
